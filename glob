#!/usr/bin/env ruby

require 'optparse'

module Mike
  module Glob
    def self.die(code,msg)
      STDERR.puts(msg)
      exit(code)
    end
    def self.dbg(msgs,prefix='')
      msgs = [msgs] if msgs.class != Array
      msgs.each do |msg|
        msg.each_line do |line|
          STDERR.puts("[DEBUG] [glob] #{prefix}#{line}")
        end
      end
    end
    def self.expand_per(patterns,o={})
      patterns = [patterns] if patterns.class != Array
      pattern_expansions = []
      patterns.each do |pattern|
        dbg("#{'-'*40}\nparsing pattern '#{pattern}' =>") if o[:X]
        tokens    = []
        remaining = pattern
        while remaining =~ /^(.*?)(\{[^\}]*\}|\[[^\]]*\])(.*)$/
          tokens  << { type: 'string', raw: $1 }
          glob      = $2
          remaining = $3
          case glob
            when /^\{(.*)\}$/
              dbg("  found word list '#{glob}'") if o[:X]
              list  = $1
              words = list.split(',')
              words << '' if list =~ /^.*,$/
              tokens << { type: 'word list', raw: glob, values: words }
            when /^\[(.*)\]$/
              dbg("  found character list '#{glob}'") if o[:X]
              chars = ''
              remaining_chars = $1
              while remaining_chars =~ /^(.*?)(([^-])-([^-]))(.*)$/
                chars += $1
                range,first,last = $2,$3,$4
                remaining_chars = $5
                dbg("    with character range '#{range}'") if o[:X]
                char_range = (first.ord..last.ord).to_a
                char_range = (last.ord..first.ord).to_a.reverse if first.ord > last.ord
                char_range.each { |c| chars += c.chr }
              end
              chars += remaining_chars
              tokens << { type: 'character list', raw: glob, values: chars.chars }
          end
        end
        tokens << { type: 'string', raw: remaining }
        tokens.reverse! if o[:r]
        expansions = ['']
        tokens[0..-1].each do |token|
          next if token[:type] == 'string' and token[:raw] == ''
          dbg("expanding #{token[:type]} '#{token[:raw]}' =>") if o[:X]
          token[:values] = [token[:raw]] if token[:type] == 'string'
          expansions = expansions.product(token[:values])
          expansions.map! { |e| o[:r] ? e.reverse.join : e.join }
          dbg("  #{expansions.join("\n  ")}") if o[:X]
        end
        expansions.delete_if do |e|
          if (o[:i] and e !~ /#{o[:i]}/) or (o[:e] and e =~ /#{o[:e]}/)
            dbg("filtering out '#{e}'") if o[:X]
            true
          end
        end
        pattern_expansions << { pattern => expansions }
      end
      return pattern_expansions # array of hashes mapping each pattern to its expansions
    end
    def self.expand(patterns,o={})
      aoh = expand_per(patterns,o)
      arr = []
      aoh.each { |h| h.each { |k,v| arr |= v } }
      return arr
    end
    def self.cli_app
      o = {}
      (op = OptionParser.new do |p|
        p.banner =
          "Usage:\n" +
          "  #{File.basename($0)} [options] 'pattern' ['pattern' ...]\n" +
          "Options:\n"
        p.summary_indent = '  '; p.summary_width = 9
        p.on("-d STRNG","Output delimiter. If unspecified, a newline is used.") { |v| o[:d] = v }
        p.on("-i REGEX","Include only expansions that match REGEX.") { |v| o[:i] = v }
        p.on("-e REGEX","Exclude all  expansions that match REGEX.") { |v| o[:e] = v }
        p.on("-r",      "Expand each pattern's globs in reverse order.") { o[:r] = 1 }
        p.on("-X",      "Print debugging info to STDERR.") { o[:X] = 1 }
        p.on("-h",      "Display this help message and exit.") { puts(p.help); exit(0) }
        p.separator("")
        p.separator("Word List Patterns:")
        p.separator("  server-{foo,bar,baz}    => server-foo, server-bar, server-baz")
        p.separator("  server{,-foo,-bar,-baz} => server server-foo, server-bar, server-baz")
        p.separator("  server{-foo,-bar,-baz,} => server-foo, server-bar, server-baz server")
        p.separator("")
        p.separator("Character List Patterns:")
        p.separator("  server-[abc] => server-a server-b server-c")
        p.separator("  server-[a-c] => server-a server-b server-c")
        p.separator("  server-[c-a] => server-c server-b server-a")
        p.separator("")
        p.separator("Combining Patterns:")
        p.separator("  server-[abc][1-3]{,-mng} =>")
        p.separator("    server-a1, server-a1-mng, server-a2, server-a2-mng, server-a3, server-a3-mng,")
        p.separator("    server-b1, server-b1-mng, server-b2, server-b2-mng, server-b3, server-b3-mng,")
        p.separator("    server-c1, server-c1-mng, server-c2, server-c2-mng, server-c3, server-c3-mng")
      end).parse!
      puts expand(ARGV,o).join((o[:d] or "\n"))
    end
  end
end

Mike::Glob::cli_app if $0 == __FILE__
