#!/usr/bin/env ruby

require 'optparse'
require 'pty'

module Mike
  module MPing
    class Stats
      def add_mark(mark)
        @marks << { mark: mark, stats: {} }
      end
      def get_marks(mark)
      end
      def set(stat,value) @marks.each { |m| m[stat] = value } end
      def inc(stat,value) @marks.each { |m| m[stat] = (m[stat] or 0) + value } end
    end
    class Pinger
      def initialize(hosts,opts={})
        @stats = {}
        hosts.each do |host|
          @stats[ip] = {}
        end
      end
      def start
        @thread = Thread.new do
          Pty.spawn(fping) do |stdout,stdin,pid|
            stdout.each do |line|
              case line.strip!
                when /^(\S+)\s+: xmt\/rcv\/%loss = (\d+)\/(\d+)\/\S+ min\/avg\/max = \S+\/([0-9.]+)\/.*$/
                  ip, tx, rx, rtt = $1, $2.to_i, $3.to_i, $4.to_f
                  next if not @stats.key?(ip)
                  s = @stats(ip)
                  s[:num]  = (s[:num] or 0) + 1
                  s[:tx]   = (s[:tx]  or 0) + tx
                  s[:rx]   = (s[:rx]  or 0) + rx
                  s[:last] = rtt
                  s[:sum]  = (s[:sum] or 0) + rtt
                  s[:min]  = rtt if not s[:min] or s[:min] > rtt
                  s[:max]  = rtt if not s[:max] or s[:max] < rtt
                  now = Time.now
                  if rx > 0
                    if s[:state] == :down
                      s[:dtime] = (s[:dtime] or 0) + (now - s[:start])
                      s[:start] = now
                      s[:ucnt] = (s[:ucnt] or 0) + 1
                    end
                    s[:state] = :up
                    s[:lcnt] = tx - rx
                    s[:loss] = (tx > rx ? true : false)
                  else
                    next if tx == 0
                    s[:lstart] = now if s[:state] == :up
                    s[:lcnt] = (s[:lcnt] or 0) + tx
                    if s[:lcnt] > @opts[:l]
                      if s[:state] == :up
                        s[:utime] = (s[:utime] or 0) + (s[:lstart] - s[:start])
                        s[:start] = s[:lstart]
                        s[:dcnt]  = (s[:dcnt] or 0) + 1
                        s[:state] = :down
                      end
                    end
                  end
              end
            end
          end
        end
      end
      def stop
      end
      def cli_display
        while true
        end
      end
    end
    def self.cli_app()
      begin
        (op = OptionParser.new do |p|
          p.banner =
            "Usage:\n"+
            "  #{File.basename($0)} [options] host [host...]\n" +
            "Options:"
          p.summary_indent = '  '; p.summary_width = 8
          p.on("-l","") { || }
          p.on("-j","") { || }
          p.on("-H HOOK","") { || }
          p.on("-h","Display this help message and exit.") { puts(self.help); exit(0) }
        end).parse!
      rescue
      end
      pinger = Pinger.new(ARGV)
    end
  end
end

Mike::MPing::cli_app() if $0 == __FILE__

